"""

This is the main program for the interactive database project.

Database program updated on: 4/1/2019.

"""


def database():
	master_mem = []; mem_list = []; spec_mem = []; div_mem = []; int_mem = []; str_mem = []; boo_mem = []; flo_mem = []; oth_mem = []
	def spacer():
		print("\n"*5)
	def dotter():
		print(".\n.\n.\n.\n.\n.\n.\n.\n.\n.")
	spacer()
	if 1:
		spacer(); spacer();
		print("D A T A B A S E");
		spacer();
		print("**For help using this database, type 'help' into the command line.");
		spacer();
	zx = 0
	while zx == 0:
		menu = input(". < ! > : MAIN MENU : Please enter a command:  "); dotter();
		sg = 0
		if menu == "rest":
			dotter(); qw = input(". < ... >  :  Resting rn.  Press enter to continue."+" "*2); dotter(); dotter()
		if menu == "view":
			dotter(); print(master_mem); dotter()
		if menu == "view integer":
			dotter(); print(int_mem); dotter();
		if menu == "view string":
			dotter(); print(str_mem); dotter();
		if menu == "view boolean":
			dotter(); print(boo_mem); dotter();
		if menu == "view float":
			dotter(); print(flo_mem); dotter();
		if menu == "view other":
			dotter(); print(oth_mem); dotter();
		if menu == "add":
			dotter(); dotter();
			#-----
			#Beginning of data specification section.
			#-----
			print("{2}{1}1 - integer ... {0}{1}2 - string ... {0}{1}3 - boolean ... {0}{1}4 - float... {0}{1}5 - other... {0}{1}6 - none... {0}{0}".format("\n."*5, "-----> ", "."))
			specify = input(". < ? > : Would you like to specify your inputs by data type? (yes/no) ")
			if specify == 'yes':
				dotter(); dotter();
				spectype1 = input("Please enter the data type of your data batch:  ")
				if spectype1 == "integer":
					dotter(); dotter();
					add_int = []
					int_query = int(input(". < ! > : How many data points would you like to enter into the system (answer with an integer)?  "));
					dotter(); int_a = []; int_a.extend(" "*int_query); int_b = 0;
					while int_b < len(int_a):
						dotter; int_rr = input(". < ! > : Enter your data here:  "); dotter(); int_a[int_b] = int_rr; print(".{0}".format(int_a)); print("\n.");
						mem_list.append(int_a[int_b]); master_mem.append(int_a[int_b]); int_mem.append(int_a[int_b]); int_b = int_b + 1;
					if int_b == len(int_a):
						dotter(); int_c = input(". < ! > : **Press enter to finalize data entry.**  "); dotter(); int_b = int_b + 1; sg = sg + 1
				if spectype1 == "string":
					dotter(); dotter();
					add_str = []
					str_query = int(input(". < ! > : How many data points would you like to enter into the system (answer with an integer)?  "));
					dotter(); str_a = []; str_a.extend(" "*str_query); str_b = 0;
					while str_b < len(str_a):
						dotter; str_rr = input(". < ! > : Enter your data here:  "); dotter(); str_a[str_b] = str_rr; print(".{0}".format(str_a)); print("\n.");
						mem_list.append(str_a[str_b]); master_mem.append(str_a[str_b]); str_mem.append(str_a[str_b]); str_b = str_b + 1;
					if str_b == len(str_a):
						dotter(); str_c = input(". < ! > : **Press enter to finalize data entry.**  "); dotter(); str_b = str_b + 1; sg = sg + 1
				if spectype1 == "boolean":
					dotter(); dotter();
					add_boo = []
					boo_query = int(input(". < ! > : How many data points would you like to enter into the system (answer with an integer)?  "));
					dotter(); boo_a = []; boo_a.extend(" "*boo_query); boo_b = 0;
					while boo_b < len(boo_a):
						dotter; boo_rr = input(". < ! > : Enter your data here:  "); dotter(); boo_a[boo_b] = boo_rr; print(".{0}".format(boo_a)); print("\n.");
						mem_list.append(boo_a[boo_b]); master_mem.append(boo_a[boo_b]); boo_mem.append(boo_a[boo_b]); boo_b = boo_b + 1;
					if boo_b == len(boo_a):
						dotter(); boo_c = input(". < ! > : **Press enter to finalize data entry.**  "); dotter(); boo_b = boo_b + 1; sg = sg + 1
				if spectype1 == "float":
					dotter(); dotter();
					add_flo = []
					flo_query = int(input(". < ! > : How many data points would you like to enter into the system (answer with an integer)?  "));
					dotter(); flo_a = []; flo_a.extend(" "*flo_query); flo_b = 0;
					while flo_b < len(flo_a):
						dotter; flo_rr = input(". < ! > : Enter your data here:  "); dotter(); flo_a[flo_b] = flo_rr; print(".{0}".format(flo_a)); print("\n.");
						mem_list.append(flo_a[flo_b]); master_mem.append(flo_a[flo_b]); flo_mem.append(flo_a[flo_b]); flo_b = flo_b + 1;
					if flo_b == len(flo_a):
						dotter(); flo_c = input(". < ! > : **Press enter to finalize data entry.**  "); dotter(); flo_b = flo_b + 1; sg = sg + 1
				if spectype1 == "other":
					dotter(); dotter();
					add_oth = []
					oth_query = int(input(". < ! > : How many data points would you like to enter into the system (answer with an integer)?  "));
					dotter(); oth_a = []; oth_a.extend(" "*oth_query); oth_b = 0;
					while oth_b < len(oth_a):
						dotter; oth_rr = input(". < ! > : Enter your data here:  "); dotter(); oth_a[oth_b] = oth_rr; print(".{0}".format(oth_a)); print("\n.");
						mem_list.append(oth_a[oth_b]); master_mem.append(oth_a[oth_b]); oth_mem.append(oth_a[oth_b]); oth_b = oth_b + 1;
					if oth_b == len(oth_a):
						dotter(); oth_c = input(". < ! > : **Press enter to finalize data entry.**  "); dotter(); oth_b = oth_b + 1; sg = sg + 1
			#-----
			#End of data specification section.
			#-----
			elif specify == 'no':
				dotter(); dotter();
				mem = []; query = int(input(". < ! > : How many data points would you like to enter into the system (answer with an integer)?  "));
				dotter(); a = []; a.extend(" "*query); b = 0;
				while b < len(a):
					dotter; rr = input(". < ! > : Enter your data here:  "); dotter(); a[b] = rr; print(".{0}".format(a)); print(".\n."); mem_list.append(a[b]); master_mem.append(a[b]); b = b + 1
				if b == len(a):
					dotter(); c = input(". < ! > : **Press enter to finalize data entry.**  "); dotter(); dotter(); b = b + 1; sg = sg + 1
		if menu == "quit":
			zx = zx + 1
		if menu == "clear":
			master_mem = []
		if menu == "help":
			help_dir_map = print("{0}{1}1 - rest ... {0}{1}2 - view ... {0}{1}3 - quit ... {0}{1}4 - add... {0}{1}5 - help... {0}{0}".format("\n."*5, "-----> "))
			help_query = input(". < ? > : Please enter the name of the command you need help with:  "); dotter()
			if help_query == "rest":
				dotter()
				print(". < ? > : The 'rest' command allows you to put the program into a 'sleep' mode.{0}{1}{0}{1}By using this command, you can halt operations of the program, but reactivate the program by pressing the Enter key.".format("\n", ".       : "))
				dotter()
			elif help_query == "view":
				dotter()
				print(". < ? > : The 'view' command allows you to view the data contained in the database.{0}{1}{0}{1}By using this command, you can view all available data sets within the system.".format("\n", ".       : "))
				dotter()
			elif help_query == "quit":
				dotter()
				print(". < ? > : The 'quit' command shuts down the database.{0}{1}{0}{1}You can restart the database by entering in the following command: 'database()'.".format("\n", ".       : "))
				dotter()
			elif help_query == "add":
				dotter()
				print(". < ? > : The 'add' command allows you to add data to the database.{0}{1}{0}{1}Each time you use the add command, you create a new 'batch' of data that is entered into the database.{0}{1}{0}{1}All of the 'batches' that are created by you are stored in the database library, and can be recalled at any time.".format("\n", ".       : "));
				dotter()
			elif help_query == "help":
				dotter()
				print(" < ? > : The 'help' command allows you to access the database's help menu, which provides instructions on how to use the database's commands and features.");
				dotter();


